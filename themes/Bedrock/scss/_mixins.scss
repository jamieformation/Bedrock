/** Grid **/
@mixin grid($cols,$margin){
	width: calc(100%/#{$cols} - (#{$margin} - #{$margin}/#{$cols}));
	float: left;
	margin-right: $margin;
	margin-bottom: $margin;
	&:nth-child(#{$cols+1}n){
		margin-right: $margin;
	}
	&:nth-child(#{$cols}n){
		margin-right: 0;
		clear: none;
	}
	&:nth-child(#{$cols}n+1){
		clear: both;
	}
}

/** Tooltip **/
@mixin tooltip-arrow($size,$position){
	&:after{
		content: '';
		display: block;
		width: $size;
		height: $size;
		background-color: inherit;
		position: absolute;
		@if $position == 'top'{
			top: -$size/2;
			left: 50%;
			margin-left: -$size/2;
		}@else if($position == 'left'){
			top: 50%;
			margin-top: -$size/2;
			left: -$size/2;
		}@else if($position == 'right'){
			top: 50%;
			margin-top: -$size/2;
			right: -$size/2;
		}@else if($position == 'bottom'){
			left: 50%;
			margin-left: -$size/2;
			bottom: -$size/2;
		}
		@include rotate(45deg);
	}
}

/** Shapes **/
@mixin circle($size){
	width: $size;
	height: $size;
	border-radius: 50%;
}
@mixin square($size){
	width: $size;
	height: $size;
}

/** Filter **/
@mixin filter($filter){
	-webkit-filter: $filter;
	filter: $filter;
}
@mixin grayscale($percent){
	@include filter(grayscale($percent));
}
@mixin brightness($percent){
	@include filter(brightness($percent));
}
@mixin invert($percent){
	@include filter(invert($percent));
}
@mixin white(){
	@include filter(brightness(0) invert(100%));
}

/** Buttons **/
@mixin close($size){
	display: block;
	width: $size;
	height: $size;
	line-height: $size;
	text-align: center;
	font-size: $size;
	font-weight: bold;
	cursor: pointer;
	&:before{
		content: '\00d7';
	}
}

/** Internet Explorer Fixes **/
@mixin ie-fix(){
	@media all and (-ms-high-contrast: none),(-ms-high-contrast: active){
		@content;
	}
}

// Background blend mode replacement
@mixin replacement-background(){
	@media all and (-ms-high-contrast: none),(-ms-high-contrast: active){
		@content;
	}
	@supports(not(background-blend-mode: multiply)){
		@content;
	}
}

/** Others **/

@mixin menu-bars(){
	position: relative;
	display: inline-block;
	vertical-align: middle;
	width: 100%;
	height: 20%;
	&:before{
		content: '';
		position: absolute;
		display: block;
		width: 100%;
		height: 100%;
		background: inherit;
		@include translateY(-200%);
	}
	&:after{
		content: '';
		position: absolute;
		display: block;
		width: 100%;
		height: 100%;
		background: inherit;
		@include translateY(200%);
	}
}

@function min-padding-point($min,$max){
	@return ($min/($max/1920));
}
@mixin variable-padding($min,$max){
	padding-top: ($max/1920px * 100%);
	padding-bottom: ($max/1920px * 100%);
	@media screen and (min-width: 1920px){
		padding-top: $max;
		padding-bottom: $max;
	}
	@media screen and (max-width: #{min-padding-point($min,$max)}px){
		padding-top: $min;
		padding-bottom: $min;
	}
}
@mixin clearfix(){
	&:after{
		content: '';
		display: block;
		clear: both;
	}
}

/** Columns **/
@mixin column-count($count){
	-webkit-column-count: $count;
    -moz-column-count: $count;
    column-count: $count;
}

/** Flexbox Grid Responsive Grid */

@mixin grid-row($margin, $screen-width:null) {
	@if ($screen-width) {
		@media screen and (max-width: #{$screen-width}) {
			display: flex;
			margin: -#{$margin} 0 0 -#{$margin};
			align-items: flex-start;
			flex-direction: row;
			flex-wrap: wrap;
		}
	} @else {
		display: flex;
		margin: -#{$margin} 0 0 -#{$margin};
		align-items: flex-start;
		flex-direction: row;
		flex-wrap: wrap;
	}
}

@mixin grid-row-center($margin) {
	@include grid-row($margin);
	align-items: center;
}

@mixin grid-cell($columns, $margin, $screen-width:null) {
	@if ($screen-width) {
		@media screen and (max-width: #{$screen-width}) {
			padding: #{$margin} 0 0 #{$margin};
			flex-basis: calc(100% / #{$columns});
		}
	} @else {
		padding: #{$margin} 0 0 #{$margin};
		flex-basis: calc(100% / #{$columns});
	}
}

@mixin grid-cell-auto {
	flex: 1;
}

@mixin grid-cell-fixed($width) {
	flex-basis: #{$width};
}

* {
  box-sizing: border-box;
}

@mixin flex-gutter($width, $outer-gutter, $bottom-gutter) {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  margin-left: #{$outer-gutter};
  margin-right: #{$outer-gutter};
  > * {
    flex-basis: $width;
    padding-bottom: #{$bottom-gutter};
    &:last-of-type {
      margin-bottom: 0;
    }
  }
}

@mixin flex-content($columns, $outer-gutter, $inner-gutter, $bottom-gutter) {
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;
	margin-left: #{$outer-gutter};
	margin-right: #{$outer-gutter};
	margin-bottom: -#{$bottom-gutter};
	> * {
		flex-basis: calc(100% / #{$columns} - (#{$inner-gutter} / (#{$columns} / 2)));
		flex-basis: calc(100% / #{$columns} - (#{$inner-gutter} / #{$columns} * (#{$columns} - 1)));
		margin-bottom: #{$bottom-gutter};
	}
	.flex-spacer {
		height: 0;
		margin-bottom: 0!important;
	}
}

@mixin ratio($width, $height) {
  &::before {
    content: '';
    display: block;
    padding-top: calc((#{$height} / #{$width}) * 100%);
  }
}
